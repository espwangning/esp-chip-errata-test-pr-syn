stages:
  - auto_trans
  - check
  - build
  - deploy

variables:
  # Versioned esp-idf-doc env image to use for all document building jobs
  ESP_DOCS_ENV_IMAGE: "$CI_DOCKER_REGISTRY/esp-idf-doc-env-v5.4:1-1"
  ESP_DOCS_PATH: "$CI_PROJECT_DIR"
  DOCTGT: "esp32s3 esp32c6 esp32h2 esp32c2 esp32s2 esp32c3 esp32"
  DOCLANG: "en zh_CN"


.check_template:
  stage: check
  image: $ESP_DOCS_ENV_IMAGE
  tags: [check_doc_links]
  variables:
    DOCS_DIR: $CI_PROJECT_DIR/docs
    GIT_STRATEGY: fetch
    GIT_DEPTH: 0
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'  # Run for all changes to a merge request's source branch
  before_script: 
    - export CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r -m $CI_COMMIT_SHA)

check_doc_links:
  extends:
    - .check_template
  script:
    - cd docs
    - cd $DOCS_DIR
    - pip install -r requirements.txt
    - for lang in $DOCLANG; do
        for target in $DOCTGT; do
          build-docs -t $target -l $lang linkcheck;
        done
      done

check_format:
  extends:
    - .check_template
  script:
    - git clone -b new_check_format $SCRIPTS_REPO
    - echo "$CHANGED_FILES"
    - |
      # Filter only .rst files
      RST_FILES=$(echo "$CHANGED_FILES" | tr ' ' '\n' | grep '\.rst$' || true)

      if [ -n "$RST_FILES" ]; then
        output=$(bash check_docs_modules/check_rst_format.sh $RST_FILES)
        echo "$output"
        # Check if the output of the script contains any syntax errors
        if echo "$output" | grep -q "Syntax check found"; then
          exit 1  # Fail the pipeline if syntax errors are found
        fi
      else
        echo "No .rst files to check."
      fi

.build_template:
  stage: build
  image: $ESP_DOCS_ENV_IMAGE
  tags:
    - build
  variables:
    DOCS_DIR: $CI_PROJECT_DIR/docs
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'  # Run for all changes to a merge request's source branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH       # Run for all changes to the default branch
  before_script:
    - |
      echo $CI_COMMIT_SHA
      echo $DOCTGT
      export CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r -m $CI_COMMIT_SHA)
      echo "The following files have been changed: $CHANGED_FILES"
    - |
      MODIFIED_DOCTGT=()

      for file in $CHANGED_FILES; do
          MATCHED_TARGETS=()

          echo "Checking file: $file"
          
          # 1. Check the path of changed files for exact match of targets
          for target in $DOCTGT; do
              echo "Checking if target matches in file path"
              if [[ "$file" =~ (^|[^a-zA-Z0-9])$target([^a-zA-Z0-9]|$|[-_/]) ]]; then
                  echo "Matched target in file path: $target"
                  MATCHED_TARGETS+=("$target")
              fi
          done

          # 2. If no match and the changed files are under shared folder, scan the file content for exact match of targets
          if [[ ${#MATCHED_TARGETS[@]} -eq 0 ]] && [[ "$file" == docs/*/*/shared/*.rst ]] && [[ -f "$file" ]]; then
            echo "No match found in path. Scanning content of $file"
            for target in $DOCTGT; do
                if grep -qE "(^|[^a-zA-Z0-9])$target([^a-zA-Z0-9]|$|[-_/])" "$file"; then
                    echo "Matched target in content: $target"
                    MATCHED_TARGETS+=("$target")
                fi
            done
          fi

          # 3. If still no match, and the changed files are under the docs folder, build all targets
          if [[ ${#MATCHED_TARGETS[@]} -eq 0 ]] && [[ "$file" == docs/** ]]; then
              echo "No match found in path or content. Building docs for all targets ..."
              MATCHED_TARGETS=($DOCTGT)
          fi

          # 4. If add build label, build all targets
          if [[ ",$CI_MERGE_REQUEST_LABELS," =~ ,build, ]]; then
            echo "Build label detected. Building docs for all targets ..."
            MATCHED_TARGETS=($DOCTGT)
          fi

          # 5. If commit to the default branch, build all targets
          if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
            echo "Commit is on default branch ($CI_DEFAULT_BRANCH). Building docs for all targets ..."
            MATCHED_TARGETS=($DOCTGT)
          fi

          MODIFIED_DOCTGT+=("${MATCHED_TARGETS[@]}")
      done

      MODIFIED_DOCTGT=($(printf "%s\n" "${MODIFIED_DOCTGT[@]}" | sort -u))

      export MODIFIED_DOCTGT="${MODIFIED_DOCTGT[@]}"
      echo "MODIFIED_DOCTGT=${MODIFIED_DOCTGT[@]}"
  parallel:
    matrix:
      - DOCLANG: ["en", "zh_CN"]
  retry: 2
  
build_errata_html:
  extends:
    - .build_template
  script:
    - cd $DOCS_DIR
    - bash ./check_lang_folder_sync.sh
    - pip install -r requirements.txt
    - echo $MODIFIED_DOCTGT
    - for tgt in $MODIFIED_DOCTGT; do build-docs --skip-reqs-check -l $DOCLANG -t $tgt; done
    - for tgt in $MODIFIED_DOCTGT; do echo "See $CI_JOB_URL/artifacts/file/docs/_build/$DOCLANG/$tgt/html/index.html"; done
  artifacts:
    when: always
    paths:
      - $DOCS_DIR/_build/*/*/html/*
      - $DOCS_DIR/_build/*/*/*.txt
    expire_in: 4 days

build_errata_pdf:
  extends:
    - .build_template
  script:
    - cd $DOCS_DIR
    - bash ./check_lang_folder_sync.sh
    - pip install -r requirements.txt
    - echo $MODIFIED_DOCTGT
    - for tgt in $MODIFIED_DOCTGT; do build-docs --skip-reqs-check -bs latex -l $DOCLANG -t $tgt; done
    - for tgt in $MODIFIED_DOCTGT; do echo "See $CI_JOB_URL/artifacts/file/docs/_build/$DOCLANG/$tgt/latex/build/esp-chip-errata-$DOCLANG-master-$tgt.pdf"; done
  artifacts:
    when: always
    paths:
      - $DOCS_DIR/_build/*/*/latex/*
      - $DOCS_DIR/_build/*/*/*.txt
    expire_in: 4 days

.deploy_docs_template:
  stage: deploy
  image: $ESP_DOCS_ENV_IMAGE
  tags:
    - deploy
  needs:
    - build_errata_html
    - build_errata_pdf

deploy_docs_preview:
  extends:
    - .deploy_docs_template
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'  # Run for all changes to a merge request's source branch
      changes:
        - "docs/**/*"
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && ($CI_MERGE_REQUEST_LABELS =~ /^(?:[^,\n\r]+,)*build(?:,[^,\n\r]+)*$/i)  # Run if a merge request has build label
  variables:
    TYPE: "preview"
    DOCS_BUILD_DIR: "${CI_PROJECT_DIR}/docs/_build/"
    DOCS_DEPLOY_PRIVATEKEY: "$DOCS_PREVIEW_DEPLOY_KEY"
    DOCS_DEPLOY_SERVER: "$DOCS_PREVIEW_SERVER"
    DOCS_DEPLOY_SERVER_USER: "$DOCS_PREVIEW_SERVER_USER"
    DOCS_DEPLOY_PATH: "$DOCS_PREVIEW_PATH"
    DOCS_DEPLOY_URL_BASE: "$DOCS_PREVIEW_SERVER_URL/esp-chip-errata"
  script:
    - source ${CI_PROJECT_DIR}/ci/utils.sh
    - add_doc_server_ssh_keys $DOCS_DEPLOY_PRIVATEKEY $DOCS_DEPLOY_SERVER $DOCS_DEPLOY_SERVER_USER
    - export GIT_VER=$(git describe --always)
    - pip install -r ${CI_PROJECT_DIR}/docs/requirements.txt
    - mkdir -p logs
    - deploy-docs | tee logs/doc-url.txt
  artifacts:
    when: always
    paths:
      - logs/doc-url.txt
    expire_in: 4 days

post_links:
  stage: deploy
  tags: [deploy_docs]
  image: $ESP_DOCS_ENV_IMAGE
  needs:
    - deploy_docs_preview
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'  # Run for all changes to a merge request's source branch
      changes:
        - "docs/**/*"
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && ($CI_MERGE_REQUEST_LABELS =~ /^(?:[^,\n\r]+,)*build(?:,[^,\n\r]+)*$/i)  # Run if a merge request has build label
  script:
    - pip install -r ${CI_PROJECT_DIR}/docs/requirements.txt
    - ls -al logs
    - python3 post-mr-note.py $GITLAB_MR_NOTE_TOKEN $CI_PROJECT_PATH $CI_MERGE_REQUEST_IID --url $GITLAB_URL

deploy_docs_production:
  extends:
    - .deploy_docs_template
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH       # Run for changes to the default branch
  variables:
    TYPE: "production"
    DOCS_BUILD_DIR: "${CI_PROJECT_DIR}/docs/_build/"
    DOCS_DEPLOY_PRIVATEKEY: "$DOCS_PROD_DEPLOY_KEY"
    DOCS_DEPLOY_SERVER: "$DOCS_PROD_SERVER"
    DOCS_DEPLOY_SERVER_USER: "$DOCS_PROD_SERVER_USER"
    DOCS_DEPLOY_PATH: "$DOCS_PROD_PATH"
    DOCS_DEPLOY_URL_BASE: "https://docs.espressif.com/projects/esp-chip-errata"
  script:
    - source ${CI_PROJECT_DIR}/ci/utils.sh
    - add_doc_server_ssh_keys $DOCS_DEPLOY_PRIVATEKEY $DOCS_DEPLOY_SERVER $DOCS_DEPLOY_SERVER_USER
    - export GIT_VER=$(git describe --always)
    - pip install -r ${CI_PROJECT_DIR}/docs/requirements.txt
    - deploy-docs

.publish_to_cdp_template:
  stage: deploy
  image: $ESP_DOCS_ENV_IMAGE
  tags:
    - deploy
  script:
    - git config --global credential.helper store
    # Pass GitLab credentials
    - echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@{CI_SERVER_HOST}:${CI_SERVER_PORT}/documentation" >> ~/.git-credentials
    - TOOLS_URL="${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/documentation/documentation-tools.git"
    - echo $TOOLS_URL
    - git clone -b feature/add_dmf_tool $TOOLS_URL
    - ls -al # debugging
    # Read labels from MR
    - chmod +x ./documentation-tools/dmf-tool/parse_labels.sh
    - ./documentation-tools/dmf-tool/parse_labels.sh
    - cat parse_labels_output.txt
    # Read parsed PRODUCT_NAME
    - source parse_labels_output.txt
    # Skip if no product to publish
    - |
      if [ -z "$PRODUCT_NAME" ]; then
          echo "No product to publish, exiting job."
          exit 0
      fi
    # Generate DMFs
    - python documentation-tools/dmf-tool/generate-dmf.py -p . -t documentation-tools/dmf-tool/dmf-template.yml
    - mkdir -p logs
    - mv ESP*.yml logs/
    - |
        if [ -n "$CI_MERGE_REQUEST_IID" ]; then
            TRACKING_REF="$CI_PROJECT_URL/-/merge_requests/$CI_MERGE_REQUEST_IID"
        else
            TRACKING_REF="$CI_PROJECT_URL/-/pipelines/$CI_PIPELINE_ID"
        fi

        for file in logs/*.yml; do
            echo "tracking_reference: $TRACKING_REF" >> "$file"
        done

    # Publish to CDP
    - chmod +x ./documentation-tools/dmf-tool/publish_cdp.sh
    - ./documentation-tools/dmf-tool/publish_cdp.sh
  artifacts:
    when: always
    paths:
      - 'logs/*.yml'
    expire_in: 1 week

publish_to_cdp_qa_with_dmf_files:
  needs:
      - deploy_docs_preview
  extends:
      - .publish_to_cdp_template
  rules:
      - if: $CI_PIPELINE_SOURCE == 'merge_request_event'  # Run for all changes to a merge request's source branch
        changes:
          - "docs/**/*"
      - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && ($CI_MERGE_REQUEST_LABELS =~ /^(?:[^,\n\r]+,)*build(?:,[^,\n\r]+)*$/i)  # Run if a merge request has build label
  variables:
      MR_BASE_URL: "$CI_MERGE_REQUEST_PROJECT_URL/-/merge_requests"
      CDP_API_ENDPOINT: "$CDP_API_ENDPOINT_QA"

publish_to_cdp_prod_with_dmf_files:
  needs:
      - deploy_docs_production
  extends:
      - .publish_to_cdp_template
  rules:
      - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH       # Run for changes to the default branch
  variables:
      CDP_API_ENDPOINT: "$CDP_API_ENDPOINT_PROD"

check_line_num:
  image: python:3.8
  stage: auto_trans
  tags:
    - build_docs
  rules:
    - if: '$BOT_LABEL_AUTO_TRANS || $CI_MERGE_REQUEST_LABELS =~ /^(?:[^,\n\r]+,)*trans_updated(?:,[^,\n\r]+)*$/i'
    - if: '$CI_JOB_NAME =~ $BOT_DYNAMIC_TEST_JOBS && $BOT_DYNAMIC_TEST_JOBS'
  script:
    - echo "Start to check"
    - python3 --version
    - /usr/local/bin/python -m pip install --upgrade pip
    - git clone $AUTO_TRANSLATE_REPO
    - pip3 install -r ./auto-translate/requirements.txt
    - python3 ./auto-translate/check_line_num.py
    - echo "Check completed"

translate_new:
  image: python:3.8
  stage: auto_trans
  tags:
    - build_docs
  rules:
    - if: '$BOT_LABEL_AUTO_TRANS || $CI_MERGE_REQUEST_LABELS =~ /^(?:[^,\n\r]+,)*trans_new(?:,[^,\n\r]+)*$/i'
    - if: '$CI_JOB_NAME =~ $BOT_DYNAMIC_TEST_JOBS && $BOT_DYNAMIC_TEST_JOBS'
  script:
    - echo "Start to translate"
    - python3 --version
    - /usr/local/bin/python -m pip install --upgrade pip
    - git clone -b feature/optimize_language_determination $AUTO_TRANSLATE_REPO
    - pip3 install -r ./auto-translate/requirements.txt
    - echo $CI_COMMIT_REF_NAME
    - python3 ./auto-translate/translate_rst_files.py $OPENAI_API_KEY $GITLAB_URL $TRANS_BOT_TOKEN $PROJECT_ID $CI_COMMIT_REF_NAME
    - echo "Translation completed"

translate_updated:
  image: python:3.8
  stage: auto_trans
  tags:
    - build_docs
  rules:
    - if: '$BOT_LABEL_AUTO_TRANS || $CI_MERGE_REQUEST_LABELS =~ /^(?:[^,\n\r]+,)*trans_updated(?:,[^,\n\r]+)*$/i'
    - if: '$CI_JOB_NAME =~ $BOT_DYNAMIC_TEST_JOBS && $BOT_DYNAMIC_TEST_JOBS'
  script:
    - echo "Start to translate"
    - python3 --version
    - /usr/local/bin/python -m pip install --upgrade pip
    - git clone -b feature/optimize_language_determination $AUTO_TRANSLATE_REPO
    - pip3 install -r ./auto-translate/requirements.txt
    - pip3 install tenacity==8.3.0
    - echo $CI_COMMIT_REF_NAME
    - python3 ./auto-translate/translate_rst_files.py $OPENAI_API_KEY $GITLAB_URL $TRANS_BOT_TOKEN $PROJECT_ID $CI_COMMIT_REF_NAME -a
    - echo "Translation completed"
